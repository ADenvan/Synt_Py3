task_thry_set = {
  "task": [ {
      "id": "",
      "question": "",
      "tag": []
    }
  ]
}, {
  "task": [ {
    "id": 1.1,
    "question": "Задача 1.1 Напишите программу, которая принимает от пользователя строку с целыми числами, разделенными пробелами, и возвращает список этих чисел. Пример ввода: 5 3 7 2 5 3 Пример вывода: [5, 3, 7, 2, 5, 3]",
    "teg": ["int", "list"]
  }, {
    "id": 1.2,
    "question": "Задача 2 Напишите программу, которая принимает список целых чисел (результат задачи 1) и возвращает словарь, где ключи — числа из списка, а значения — количество их вхождений. Пример ввода: [5, 3, 7, 2, 5, 3] Пример вывода: {5: 2, 3: 2, 7: 1, 2: 1",
    "tag": ["list", "dict"]
  }, {
    "id": 1.3,
    "question": "Задача 3 Напишите программу, которая принимает словарь (результат задачи 2) и возвращает ключ с максимальным значением. Если таких ключей несколько, верните первый. Пример ввода: {5: 2, 3: 2, 7: 1, 2: 1 Пример вывода: 5",
    "teg": ["dict", "int"]
  }
    ]
}, {
  "task": [ {
      "id": "2.1",
      "question": "2.1 Напишите программу, которая принимает строку целых чисел, разделенных пробелами, и возвращает список длин этих чисел (в символьном представлении). В строке не только числа но и символы. # Пример ввода: 50 123 7 str to int -13 end floot# Пример вывода: [2, 3, 1]",
      "tag": ["easy"],
      "helper": ["isdigit", "split", "try:except"]
    }, {
      "id": "2.2",
      "question": "2.2 Напишите программу, которая принимает список длин чисел (результат задачи 1) и возвращает словарь, где ключи — длины, а значения — количество их вхождений. Пример ввода: [2, 3, 1]Пример вывода: {2: 1, 3: 1, 1: 1",
      "tag": ["easy"],
      "helper": ["list", "dict", "map", "str", "type"]
    }, {
      "id": "2.3",
      "question": "2.3 Напишите программу, которая принимает словарь (результат задачи 2) и возвращает наименьшую длину с максимальным количеством вхождений. # Пример ввода: {2: 1, 3: 1, 1: 1 # Пример вывода: 1",
      "tag": ["easy"],
      "helper": ["max", "min", "dict", ".values", ]
    } ]
}, {
  "task": [ {
    "id": "3.1",
    "question": "3.1 Напишите программу, которая принимает строку целых чисел, разделенных пробелами, и возвращает список этих чисел. Пример ввода: -123 45 6- Пример вывода: [123, 45, 6]",
    "tag": ["easy"],
    "helper": ["no split", "append", "accumulator count"]
  }, {
    "id": "3.2",
      "question": "3.2 Напишите программу, которая принимает список целых чисел (результат задачи 1) и возвращает словарь, где ключи — числа из списка, а значения — сумма их цифр. # Пример ввода: [123, 45, 6] # Пример вывода: {123: 6, 45: 9, 6: 6",
      "tag": [None],
      "helper": [None]
  } ]
}, {
  "task": [ {
    "id": "4.1",
      "question": "4.1 Напишите функцию multiply_list, которая принимает целое число n и список целых чисел lst. Функция должна вернуть новый список, где каждый элемент исходного списка умножен на n.# multiply_list(2, [1, 2, 3])) # Output: [2, 4, 6]",
      "tag": ["easy"],
      "helper": ["int", "list", "append", "sum", ]
  }, {
    "id": "4.2",
      "question": "4.2 Напишите функцию repeat_string, которая принимает строку s и кортеж tpl. Функция должна вернуть строку, повторенную столько раз, сколько элементов в кортеже. # repeat_string( Hi, (1, 2, 3)) # Output: HiHiHi",
      "tag": ["easy"],
      "helper": ["str", "tuple", "len", "applend", "join"]
  }, {
    "id": "4.3",
      "question": "4.3 Типы данных: dict, float -Напишите функцию multiply_dict_values, которая принимает словарь d (где значения — числа) и число factor типа float. Функция должна вернуть новый словарь, где каждое значение умножено на factor.",
      "tag": ["easy"],
      "helper": ["dict", "float", "items"]
  } ]
}, {
  "task": [ {
      "id": "5.1",
      "question": "5.1 Объединение списка строк с разделителем (list, str) Напишите функцию join_strings, которая принимает список строк strings и строку-разделитель separator. Функция должна объединить элементы списка в одну строку, разделяя их separator.",
      "tag": ["easy"],
      "helper": ["join"]
    }, {
      "id": "5.2",
      "question": "5.2 Среднее значение кортежа чисел (tuple, float)Напишите функцию average_tuple, которая принимает кортеж чисел numbers и возвращает их среднее значение, округлённое до двух знаков после запятой.",
      "tag": ["easy"],
      "helper": ["len", "sum",""]
    }, {
      "id": "5.3",
      "question": "5.3 Создание словаря из двух списков (list, dict) Напишите функцию create_dict, которая принимает два списка: keys (ключи) и values (значения). Функция должна вернуть словарь, где каждый ключ из keys соответствует значению из values. Если списки разной длины, используйте длину более короткого списка.",
      "tag": ["easy"],
      "helper": ["zip", "dict"]
    } ]
}, {
  
}